allData = data.frame(allData)
for(h1Var in P$h1Var) {
for (h2Var in P$h2Var) {
for (hCoV in P$hCoV) {
for (v1Var in P$v1Var) {
for (lambda.v in P$lambda.v){
for(lambda.value in P$lambda.value) {
for(lambda.extinction in P$lambda.extinction){
for (g in P$g) {
for (prop.extinct in P$prop.extinct) {
for (treeNum in 1:nrow(trees)) {
addData = data.frame(treeNum = treeNum, h1data = rep(NA, times = nsim), h2data = NA, vdata = NA, prefMatrixAll = NA, prefMatrixExt = NA, h1Var = h1Var, h2Var = h2Var, hCoV = hCoV, v1Var = v1Var, lambda.v = lambda.v, lambda.value = lambda.value, lambda.extinction = lambda.extinction, g = g, prop.extinct = prop.extinct)
allData = rbind(allData, addData)
}}}}}}}}}}
}
#hostTraits = mapply(simHostTraits, treeNum = allData$treeNum, h1Var = allData$h1Var, h2Var = allData$h2Var, hCoV = allData$hCoV, lambda.value = allData$lambda.value, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE) for covarying traits
#allData$h1data = mapply(function(x) x[,1], hostTraits, SIMPLIFY = FALSE)
#allData$h2data = mapply(function(x) x[,2], hostTraits, SIMPLIFY = FALSE)
allData$h1data = mapply(simHostTrait, treeNum = allData$treeNum, h1Var = allData$h1Var, lambda.value = allData$lambda.value, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, h2Var = allData$h2Var, lamdba.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$vdata = mapply(simVectorTrait, treeNum = allData$treeNum, v1Var = allData$v1Var, lambda.value = allData$lambda.v, MoreArgs = list(allTrees = trees$vTree), SIMPLIFY = FALSE)
allData$prefMatrixAll = mapply(createPrefMatrix, hTrait = allData$h1data, vTrait = allData$vdata, g = allData$g, SIMPLIFY = FALSE)
h1Extinct = mapply(extinction, h1data = allData$h1data, h2data = allData$h2data, prop.extinction = allData$prop.extinct, SIMPLIFY = FALSE)
allData$prefMatrixExt = mapply(createPrefMatrix, hTrait = h1Extinct, vTrait = allData$vdata, g = allData$g, SIMPLIFY = FALSE)
return(allData)
}
P = list(h = c(10, 20), b.h = 0.5, d.h = 0.25, v = 10, b.v = 0.5, d.v = 0.25,lambda.v = c(0,1), lambda.value = c(0, 0.5, 1), lambda.extinction = 0.5, h1Var = 1, h2Var = 1, hCoV = 0.5, v1Var = 1, g = 2, prop.extinct = 0.1) #change values of any parameter. A vector of values can be used. Iterates over all possible combinations
trees = simulateTrees(ntree = 1, P)
traitData = simulateData(nsim = 1, P, trees)
allData = matrix(NA, nrow = 0, ncol = 15) #1 col each for tree number, pref matrix with and without extinction, each data simulation parameter, plus 2 for host traits and 1 for vector data,
colnames(allData) = c("treeNum", "h1data", "h2data", "hCoV", "vdata", "prefMatrixAll", "prefMatrixExt", "h1Var", "h2Var", "lambda.v", "v1Var", "lambda.value", "lambda.extinction", "g", "prop.extinction")
allData = data.frame(allData)
for(h1Var in P$h1Var) {
for (h2Var in P$h2Var) {
for (hCoV in P$hCoV) {
for (v1Var in P$v1Var) {
for (lambda.v in P$lambda.v){
for(lambda.value in P$lambda.value) {
for(lambda.extinction in P$lambda.extinction){
for (g in P$g) {
for (prop.extinct in P$prop.extinct) {
for (treeNum in 1:nrow(trees)) {
addData = data.frame(treeNum = treeNum, h1data = rep(NA, times = nsim), h2data = NA, vdata = NA, prefMatrixAll = NA, prefMatrixExt = NA, h1Var = h1Var, h2Var = h2Var, hCoV = hCoV, v1Var = v1Var, lambda.v = lambda.v, lambda.value = lambda.value, lambda.extinction = lambda.extinction, g = g, prop.extinct = prop.extinct)
allData = rbind(allData, addData)
}}}}}}}}}}
allData
allData$h1data = mapply(simHostTrait, treeNum = allData$treeNum, h1Var = allData$h1Var, lambda.value = allData$lambda.value, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, h2Var = allData$h2Var, lamdba.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
simHostTrait = function(treeNum, h1Var, lambda.value, allTrees) {
print(summary(allTrees))
print(lambda.value)
tree = allTrees[[treeNum]]
treeAdj = rescale(tree, "lambda", lambda.value)
treeData = sim.char(treeAdj, h1Var, nsim = 1, model = "BM", root = 0)
treeData = treeData[,,1]
names(treeData) = gsub("s", "h", names(treeData))
treeData
}
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, h2Var = allData$h2Var, lamdba.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, h2Var = allData$h2Var, lambda.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, h2Var = allData$h2Var, lambda.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
simHostTrait = function(treeNum, hVar, lambda.value, allTrees) {
print(summary(allTrees))
print(lambda.value)
tree = allTrees[[treeNum]]
treeAdj = rescale(tree, "lambda", lambda.value)
treeData = sim.char(treeAdj, hVar, nsim = 1, model = "BM", root = 0)
treeData = treeData[,,1]
names(treeData) = gsub("s", "h", names(treeData))
treeData
}
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, hVar = allData$h2Var, lambda.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
simulateTrees = function(ntree, P, hypercube = FALSE) {
if (hypercube) {
treesMatrix = matrix(nrow = ntree * nrow(P), ncol = 8) #8 columns represent host tree, vector tree, and the 7 parameters used to simulate
colnames(treesMatrix) = c("hTree", "vTree", "h", "b.h", "d.h", "v", "b.v", "d.v")
trees = data.frame(treesMatrix)
treesP = matrix(nrow = 0, ncol = 8)
colnames(treesP) = c("hTree", "vTree", "h", "b.h", "d.h", "v", "b.v", "d.v")
for (x in 1:ntree) treesP = rbind(treesP, P)
trees[,which(colnames(trees) %in% colnames(treesP))] = treesP[,which(colnames(treesP) %in% colnames(trees))]
trees = trees[order(trees$h),]
rownames(trees) = 1:nrow(trees)
} else {
treesMatrix = matrix(nrow = 0, ncol = 8) #8 columns represent host tree, vector tree, and the 7 parameters used to simulate
colnames(treesMatrix) = c("hTree", "vTree", "h", "b.h", "d.h", "v", "b.v", "d.v")
trees = data.frame(treesMatrix)
for(h in 1:length(P$h)) {
for(b.h in 1:length(P$b.h)) {
for(d.h in 1:length(P$d.h)) {
for(v in 1:length(P$v)) {
for(b.v in 1:length(P$b.v)) {
for(d.v in 1:length(P$d.v)) {
addTrees = data.frame(hTree = rep(NA, times = ntree), vTree = NA, h = P$h[h], b.h = P$b.h[b.h], d.h = P$d.h[d.h], v = P$v[v], b.v = P$b.v[b.v], d.v = P$d.v[d.v])
trees = rbind(trees, addTrees)
}}}}}}}
trees$hTree = vector("list", length = length(trees$hTree))
trees$vTree	= vector("list", length = length(trees$vTree))
trees$hTree = mapply(createTree, birthrate = trees$b.h, deathrate = trees$d.h, numSpecies = trees$h, SIMPLIFY = FALSE)
trees$vTree = mapply(createTree, birthrate = trees$b.v, deathrate = trees$d.v, numSpecies = trees$v, SIMPLIFY = FALSE)
return(trees)
}
simulateData = function(nsim, P, trees, hypercube = FALSE) {
if (hypercube) {
oneSim = data.frame(treeNum = 1:nrow(trees), h1data = NA, h2data = NA, vdata = NA, prefMatrixAll = NA, prefMatrixExt = NA, h1Var = NA, h2Var = NA, hCoV = NA, lambda.v = NA, v1Var = NA, lambda.value = NA, lambda.extinction = NA, g = NA, prop.extinct = NA)
for (i in 1:nrow(oneSim)) {
oneSim[i, -(1:6)] = P[i, -(1:6)]
}
allData = data.frame(treeNum = NA, h1data = NA, h2data = NA, vdata = NA, prefMatrixAll = NA, prefMatrixExt = NA, h1Var = NA, h2Var = NA, hCoV = NA, lambda.v = NA, v1Var = NA, lambda.value = NA, lambda.extinction = NA, g = NA, prop.extinct = NA)
for (rep in 1:nsim) {
allData = rbind(oneSim, allData)
}
allData = allData[-nrow(allData),]
} else {
allData = matrix(NA, nrow = 0, ncol = 15) #1 col each for tree number, pref matrix with and without extinction, each data simulation parameter, plus 2 for host traits and 1 for vector data,
colnames(allData) = c("treeNum", "h1data", "h2data", "hCoV", "vdata", "prefMatrixAll", "prefMatrixExt", "h1Var", "h2Var", "lambda.v", "v1Var", "lambda.value", "lambda.extinction", "g", "prop.extinction")
allData = data.frame(allData)
for(h1Var in P$h1Var) {
for (h2Var in P$h2Var) {
for (hCoV in P$hCoV) {
for (v1Var in P$v1Var) {
for (lambda.v in P$lambda.v){
for(lambda.value in P$lambda.value) {
for(lambda.extinction in P$lambda.extinction){
for (g in P$g) {
for (prop.extinct in P$prop.extinct) {
for (treeNum in 1:nrow(trees)) {
addData = data.frame(treeNum = treeNum, h1data = rep(NA, times = nsim), h2data = NA, vdata = NA, prefMatrixAll = NA, prefMatrixExt = NA, h1Var = h1Var, h2Var = h2Var, hCoV = hCoV, v1Var = v1Var, lambda.v = lambda.v, lambda.value = lambda.value, lambda.extinction = lambda.extinction, g = g, prop.extinct = prop.extinct)
allData = rbind(allData, addData)
}}}}}}}}}}
}
#hostTraits = mapply(simHostTraits, treeNum = allData$treeNum, h1Var = allData$h1Var, h2Var = allData$h2Var, hCoV = allData$hCoV, lambda.value = allData$lambda.value, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE) for covarying traits
#allData$h1data = mapply(function(x) x[,1], hostTraits, SIMPLIFY = FALSE)
#allData$h2data = mapply(function(x) x[,2], hostTraits, SIMPLIFY = FALSE)
allData$h1data = mapply(simHostTrait, treeNum = allData$treeNum, hVar = allData$h1Var, lambda.value = allData$lambda.value, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$h2data = mapply(simHostTrait, treeNum = allData$treeNum, hVar = allData$h2Var, lambda.value = allData$lambda.extinction, MoreArgs = list(allTrees = trees$hTree), SIMPLIFY = FALSE)
allData$vdata = mapply(simVectorTrait, treeNum = allData$treeNum, v1Var = allData$v1Var, lambda.value = allData$lambda.v, MoreArgs = list(allTrees = trees$vTree), SIMPLIFY = FALSE)
allData$prefMatrixAll = mapply(createPrefMatrix, hTrait = allData$h1data, vTrait = allData$vdata, g = allData$g, SIMPLIFY = FALSE)
h1Extinct = mapply(extinction, h1data = allData$h1data, h2data = allData$h2data, prop.extinction = allData$prop.extinct, SIMPLIFY = FALSE)
allData$prefMatrixExt = mapply(createPrefMatrix, hTrait = h1Extinct, vTrait = allData$vdata, g = allData$g, SIMPLIFY = FALSE)
return(allData)
}
P = list(h = c(10, 20), b.h = 0.5, d.h = 0.25, v = 10, b.v = 0.5, d.v = 0.25,lambda.v = c(0,1), lambda.value = c(0, 0.5, 1), lambda.extinction = 0.5, h1Var = 1, h2Var = 1, hCoV = 0.5, v1Var = 1, g = 2, prop.extinct = 0.1) #change values of any parameter. A vector of values can be used. Iterates over all possible combinations
trees = simulateTrees(ntree = 1, P)
traitData = simulateData(nsim = 1, P, trees)
simHostTrait = function(treeNum, hVar, lambda.value, allTrees) {
tree = allTrees[[treeNum]]
treeAdj = rescale(tree, "lambda", lambda.value)
treeData = sim.char(treeAdj, hVar, nsim = 1, model = "BM", root = 0)
treeData = treeData[,,1]
names(treeData) = gsub("s", "h", names(treeData))
treeData
}
P = list(h = c(10, 20), b.h = 0.5, d.h = 0.25, v = 10, b.v = 0.5, d.v = 0.25,lambda.v = c(0,1), lambda.value = c(0, 0.5, 1), lambda.extinction = 0.5, h1Var = 1, h2Var = 1, hCoV = 0.5, v1Var = 1, g = 2, prop.extinct = 0.1) #change values of any parameter. A vector of values can be used. Iterates over all possible combinations
trees = simulateTrees(ntree = 1, P)
traitData = simulateData(nsim = 1, P, trees)
allData = getZscores(traitData, trees)
library(geiger)
library(PHYLOGR)
library(igraph)
library(bipartite)
library(phytools)
library(ggplot2)
library(lhs)
install.packages('shiny')
install.packages("gtools")
##Version Updates
#Version 1: everything is new!
#Someday, I will describe the model here
###Notes for Alexander###
##Things that need fixing:
#~~noticed that detour sometimes goes to a resource further away than AG destinations. This should not be happening.
##Things to improve:
#~~Additive gravity rule (weight of j vs. G)
#~~Equation for when primates leave a patch
#~~Clustering and other spatial statistics of resources
#~~Magic numbers removed and added as parameters (extraction_rate)
##Things to add:
#~~resource birth/death
#~~new rules for starting locations
#~~limited LTM, LTM updating by sight
#~~increase functionality with multiple primates
#~~rank order behaviors and other group behavior rules
##Things to consider
#~~Detour will go to any resource closer than AG, consider requiring detour to move toward AG
#~~implementation of NNR could be informative, could also unnecessarily slow processing time
#####################################SET-UP##################################################
library(plyr)
library(calibrate)
library(graphics)
defaultEnergy = 0				#energy that primates start with by default. Can be overwritten during primate creation
fieldSize = 10				#maximum absolute value for x and y coordinates of a resource. Model currently only supports square fields
resourceAvail = 600			#average total resource availability. Expected mean resource size will be this value divided by resource num
resSizeRange = 7				#size by which any resource is able to deviate from the expected mean. Resource size is a random uniform draw.
resourceNum = 20				#number of resources generated
cluster = 0.2				#probability that a new resource will be created between 1 and 2 units away from the previous resource
depletionIndex = 0			#scales the diminition return factor of resources. At 0, resource density has no impact on foraging return. At 1, foraging return is multiplied by the density
k = 1						#distance exponent in gravity model. The simple gravity score is Size/ Distance ^ k
primateSpeed = 1				#how many units a primate can move per step
groupSizes = c(1)				#each element of the vector represents a group, the value is the size of the group. Currently, all individuals are created on the same point, making more than one individual indistinguisable from increasing the foraging rate of a single individual. plotEnergy function does not handle multiple primates yet
moveCost = 2				#energy decrease each step a primate moves
metabCost = 2				#energy decrease each step. If primate moves, this is added to moveCost. Also currently used to determine if a primate should leave current resource (primate leaves when expected foraging return is less than this value)
rRegen = c(min = 0, max = 0)		#determines density increase of resources for each step. Resources are assigned a value uniformly drawn from this range during environment creation. To scale regen rate to resource value, manually change in fillRegen_rate function
types = c("AG", "hybrid")		#movement models to simulate across all created environments. Model can handle vector of any length, but currently only has methods for "AG" and "hybrid"
P = list(defEn = defaultEnergy, fieldSize = fieldSize, resAvail = resourceAvail, resSR = resSizeRange, resNum = resourceNum, clus = cluster, depI = depletionIndex, k = k, pSpeed = 1, grSizes = groupSizes, mCost = moveCost, metabCost = metabCost, rRegen = rRegen, types = types)  #saves all parameters to a list that can easily be passed to functions
###################################FUNCTIONS####################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Environment Creation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
createEnviron = function(P) {
#input: List of parameters
#output: data frame with number of rows = resourceNum and capital letters for row names.
#data frame created contains all resource information including coordinates, return_value, extract_rate, density (starts at 1), and regen_rate. If more than 26 resources, row-names will become NA which will affect some functions in model
environ = data.frame(matrix(0, nrow = P$resNum, ncol = 5, dimnames = list(LETTERS[1:P$resNum], c("coordinates", "return_value", "extract_rate", "density", "regen_rate"))))
environ$coordinates = vector("list", length(environ$coordinates))																					#changes coordinates column to a list (allows mapply to fill each element with a vector)
for (i in seq(nrow(environ))) environ$coordinates[[i]] = fillCoords(environ$coordinates, i, P)[[i]]
environ$return_value = sapply(environ$return_value, function(x) round(runif(n = 1, min = P$resAvail/P$resNum - P$resSR, max = P$resAvail/P$resNum + P$resSR), digits = 0))
environ$extract_rate = 1																											#If changed from one, add as a parameter
environ$density = 1
environ$regen_rate = mapply(fillRegen_rate, environ$regen_rate, MoreArgs = list(P = P))
environ
}
fillCoords = function(coords, i, P) {
#input: a list of coordinates (can be empty), index to fill, and list of parameters
#output: new list of coordinates
#only generates one set of coordinates, but takes whole list as input so previous coordinates can be referenced. element of list prior to i should be filled
#note* The output is a whole list of corrdinates, so be sure to index the result if you only want the coordinates that were generated.
if (i == 1) {coords[[i]] = c(x = round(runif(n = 1, min = -P$fieldSize, max = P$fieldSize), digits = 2), y = round(runif(n = 1, min = -P$fieldSize, max = P$fieldSize), digits = 2))						#First element of list is generated randomly. Adbsolute value of generated coordinates mus be less than field size
} else {
while(! min(mapply(getDist, c1 = coords[-i], MoreArgs = list(c2 = coords[i])), na.rm = TRUE) > 1 || min(mapply(getDist, c1 = coords[-i], MoreArgs = list(c2 = coords[i])), na.rm = TRUE) == Inf) {  			#Prevents resources from being created too close to others. If the minumum distance of the current coordinate from any other coordinate is < 1(works if current coordinate has not been assigned) assign a new value to the current coordinate (Second condition allows for vector of NA's)
if (runif(n = 1) >= P$clus) { coords[[i]] = c(x = round(runif(n = 1, min = -P$fieldSize, max = P$fieldSize), digits = 2), y = round(runif(n = 1, min = -P$fieldSize, max = P$fieldSize), digits = 2))		#**NEEDS ATTENTION**runs probability of clustering, and if TRUE new resource x AND y coordinates must be between 1 and 2 units from previous resource. Should limit total distance instead
}else coords[[i]] = c(round(coords[[i-1]]["x"] + 1 + runif(n = 1, min = -1, max = 1), digits = 2), round(coords[[i-1]]["y"] + 1 + runif(n = 1, min = -1, max = 1), digits = 2))
}
}
coords
}
fillRegen_rate = function(x, P) {
#generates a single regenration rate using parameters. Can probably be integrated with createEnviron
x = round(runif(n = 1, min = P$rRegen["min"], max = P$rRegen["max"]), digits = 4)
x
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Primate Creation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
newPrimate = setClass("primate", slots = c(location = "numeric", LTM = "data.frame", energy = "numeric", forageEf = "numeric", speed = "numeric", type = "character"), validity = primateValidity)  #creates the primate class of objects
#*note there are currently no primate specific methods. This exists as a class mostly to allow expansion of subclasses by movement type or dominance in future versions
primateValidity = function(object) {
#Checks that input values of a newly created primate are valid. Returns appropriate error messages in cases where they are not
#NEEDS EXPANDING
if (! length(object@location) == 2) {return("location contains more than 2 coordinates")
if (! length(object@energy) == 1) return("energy is not a single value") }
else TRUE
}
buildPrimate = function(location, environ, P, type) {
#input: location create a new primate, environment in which to create primate, model parameters, and type of movement primate should use
#output: an object of class primate
#most slots are filled from the parameters list. If forage efficiency is change, add as a parameter.
#LTM filled from environment, with columns added for gravity and j for location. *NOTE* Future version may implement limited memory size, which will need a more sophistacted LTM creation
primate = newPrimate(location = location, LTM = environ, energy = P$defEn, forageEf = 0.2, speed = P$pSpeed, type = type)
primate@LTM$gravity = mapply(calcGravity, coordinates = primate@LTM$coordinates,
return_value = primate@LTM$return_value, density = primate@LTM$density, MoreArgs= list(location = primate@location, k = P$k))
primate@LTM$j = mapply(calc_j, i = 1:nrow(primate@LTM),
MoreArgs = list(coords = primate@LTM$coordinates, values = primate@LTM$return_value, dens = primate@LTM$density, k = P$k))
primate@LTM = transform(primate@LTM, AG = gravity + j/nrow(primate@LTM))
primate
}
createGroup = function(grSize, environ, P, type) {
#allows groups of primates to be created in seperate lists. This currently has no functionality, but allows for easier addition of group behavior rules in later versions
group = replicate(grSize, buildPrimate(location = environ$coordinates[[which(environ$return_value == max(environ$return_value))[1]]], environ = environ, P = P, type = type)) #places all primates on most valueable resource
group
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Calculations and Tools~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
calcForage = function(primate, environ, P) {
patch = which(environ$coordinates %in% list(primate@location))
if (environ$density[patch] < primate@forageEf) { 0																				#disallows foraging if patch density is lower than primates foraging efficiency
} else environ$return_value[patch] * primate@forageEf * environ$extract_rate[patch] * (environ$density[patch]/(P$depI + (1 - P$depI) * environ$density[patch]))
}
calcGravity = function(location, coordinates, return_value, density, k) {
#*note* uses actual coordinates for location rather than primate object because resource coodinates are also used as inout when calculating j.
distance = getDist(location, coordinates)
mass = return_value * density
if (distance == 0) return(NA)
if (distance < 1) {return(mass)				#moving to resource takes full step, won't divide by less than 1
} else return(mass /(distance ** k))
}
calc_j = function(i, coords, values, dens, k) {
sum(mapply(calcGravity, coordinates = coords, return_value = values, density = dens, MoreArgs = list(location = coords[[i]], k = k)), na.rm = TRUE)
}
calcDetour = function(primate, possDetours, AGPatch, P) {
LTM = primate@LTM[possDetours,]
target = sampleMod(which(LTM$dist == min(LTM$dist)))
addRes = LTM$return_value[target] * LTM$density[target]
addTrav = (P$mCost + P$metabCost) * (getDist(primate@location, LTM$coordinates[[target]]) + getDist(LTM$coordinates[[target]], LTM$coordinates[[which(row.names(LTM) == AGPatch)]]) - getDist(primate@location, LTM$coordinates[[which(row.names(LTM) == AGPatch)]]))
if (addRes >= addTrav) {return(LTM$coordinates[[target]])
} else calcDetour(primate, possDetours[-which(possDetours == row.names(LTM[target,]))], AGPatch, P)				#Recursion! If closest patch not an acceptable detour, try next closest patch
}
getDist = function(c1, c2) {
#input: two sets of coordinates. x and y coordinates must be names
#output: Euclidean distance between input points
c1 = unlist(c1)
c2 = unlist(c2)
if (! is.numeric(c1) || ! is.numeric(c2)) return(NA)
if (identical(c1, c2)) return(0)
unname(sqrt(((c1["x"] - c2["x"]) ** 2) + ((c1["y"] - c2["y"]) ** 2))) 		 #pythagorean theorem
}
sampleMod = function(x) {
#modifies the built in sample function so an input of a single value returns that value rather than sampling all integers between zero and input
if (length(x) == 1 ) return(x) else return(sample(x, size = 1))
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Step Actions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
runStep = function(prevStep) {
#fully updates data by one step
#*NOTE* returns NA if no valid action available (most commonly meaning all resources are depleted past the point that foraging outways metabolism cost)
environ = prevStep$environ
allPrimates = prevStep$allPrimates
P = prevStep$P
for (i in seq(length(allPrimates))) {													#execute step action for each primate
for (j in seq(length(allPrimates[[i]]))) {
primate = allPrimates[[i]][[j]]
action = decideAction(primate, environ, P)
if (action == "move") {primate = move(primate, environ, P)
primate@energy = primate@energy - P$mCost
} else {
if (action == "forage") {
forageReturn = calcForage(primate, environ, P)
primate@energy = primate@energy + forageReturn
patch = which(environ$coordinates %in% list(primate@location))
environ$density[patch] = round(environ$density[patch] - primate@forageEf, digits = 3)	#*NOTE* depI and extraction rate are calculated in forage return, but not here for desnity depletion. Consider updating
} else stop("invalid action")
}
allPrimates[[i]][[j]] = primate
}
}
for (i in seq(length(allPrimates))) {													#updates each primates LTM and energy after all primates have taken action
for (j in seq(length(allPrimates[[i]]))) {
allPrimates[[i]][[j]]@energy = allPrimates[[i]][[j]]@energy - P$metabCost					#this line could be moved to previous set of for loops
allPrimates[[i]][[j]]@LTM = updateLTM(allPrimates[[i]][[j]], environ)
}
}
environ = transform(environ, density = round(density + regen_rate, digits = 4)) 						#resource regeneration
environ$density = sapply(environ$density, function(x) if (x > 1) 1 else x)  							#limits density to 1 *NOTE* may also need statment to not allow density below 0 if new rules are implemented for staying at a resource
list(allPrimates = allPrimates, environ = environ, P = P)
}
decideAction = function(primate, environ, P) {
if (! list(primate@location) %in% environ$coordinates) return("move")
if (calcForage(primate, environ, P) < P$metabCost) { return("move")
} else return("forage")
}
move = function(primate, environ, P) {
if (primate@type == "AG") {dest = getDestAG(primate)
} else { if (primate@type == "hybrid") {dest = getDestHybrid(primate, P)
} else stop("invalid movement type")
}
if (getDist(primate@location, dest) <= 1) {primate@location = dest
} else primate@location = updateLoc(primate, dest)
primate
}
getDestAG = function(primate) {
dest = primate@LTM$coordinates[[sampleMod(which(primate@LTM$AG == max(primate@LTM$AG, na.rm = TRUE)))]]
}
getDestHybrid = function(primate, P) {
AGPatch = row.names(primate@LTM[sampleMod(which(primate@LTM$AG == max(primate@LTM$AG, na.rm = TRUE))),])
primate@LTM$dist = mapply(getDist, c1 = primate@LTM$coordinates, MoreArgs = list(c2 = primate@location))
rCurLoc = primate@LTM[which(primate@LTM$dist > 0),]  #LTM without resource of current location
rLowDens = rCurLoc[which(rCurLoc$density > primate@forageEf),]
possDetours = row.names(rLowDens[which(rLowDens$dist <= rLowDens[AGPatch, "dist"]),])
dest = calcDetour(primate, possDetours, AGPatch, P)
dest
}
updateLoc = function(primate, dest) {
heading = unname(atan2(x = dest["x"] - primate@location["x"], y = dest["y"] - primate@location["y"]))
moveVector = c(x = cos(heading) * primate@speed, y = sin(heading) * primate@speed)
primate@location + moveVector
}
updateLTM = function(primate, environ) {
primate@LTM$density = environ$density
primate@LTM$gravity = mapply(calcGravity, coordinates = primate@LTM$coordinates,
return_value = primate@LTM$return_value, density = primate@LTM$density, MoreArgs= list(location = primate@location, k = P$k))
primate@LTM$j = mapply(calc_j, i = 1:nrow(primate@LTM),
MoreArgs = list(coords = primate@LTM$coordinates, values = primate@LTM$return_value, dens = primate@LTM$density, k = P$k))
primate@LTM = transform(primate@LTM, AG = gravity + j/nrow(primate@LTM))
primate@LTM
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Run Functions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
initialize = function(P, environ, type) {
allPrimates = as.list(P$grSizes)
allPrimates = mapply(createGroup, allPrimates, MoreArgs = list(environ = environ, P = P, type = type), SIMPLIFY = FALSE)
initialStep = list(allPrimates = allPrimates, environ = environ, P = P)
initialStep
}
runSimulation = function(P, nsteps) {
allTypes = vector("list", length(types))
names(allTypes) = P$types
initEnviron = createEnviron(P)
for (type in P$types) {
allTypes[[type]] = vector("list", nsteps)
allTypes[[type]][[1]] = initialize(P, initEnviron, type)
n = 2
while (n <= nsteps && max(allTypes[[type]][[n - 1]]$environ$density) >= allTypes[[type]][[n - 1]]$allPrimates[[1]][[1]]@forageEf) {
allTypes[[type]][[n]] = runStep(allTypes[[type]][[n - 1]])
n = n + 1
}
}
allTypes
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Plotting and Data Analysis~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
plotRun = function(run) {
#Plots an entire data set one step at a time. One plot in graphics window for each movement type simulated plus another for trace of energy in each type
#Stops if input is NA, generally indicating the primates has consumed all available resources in a time step.
par(mfcol = c(1, length(run) + 1))
for (i in seq(length(run[[1]]))) {
for (j in seq(length(run))) {
plotStep(run[[j]][[i]], i)
}
plotEnergy(run, i)
Sys.sleep(1)
}
}
plotStep = function(step, stepNum) {
resX = vector("list", nrow(step$environ))
resX = mapply(function(x, coords) coords["x"], x = resX, coords = step$environ$coordinates)
resY = vector("list", nrow(step$environ))
resY = mapply(function(y, coords) coords["y"], y = resY, coords = step$environ$coordinates)
primX = vector("list", length(unlist(step$allPrimates)))
primX = mapply(function(x, prim) prim@location["x"], x = primX, prim = unlist(step$allPrimates))
primY = vector("list", length(unlist(step$allPrimates)))
primY = mapply(function(y, prim) prim@location["y"], y = primY, prim = unlist(step$allPrimates))
energies = vector("list", length(unlist(step$allPrimates)))
energies = mapply(function(x, prim) prim@energy, x = energies, prim = unlist(step$allPrimates))
plot(x = resX, y = resY, main = paste(step$allPrimates[[1]][[1]]@type, "step", stepNum, sep = " "))
points(x = primX, y = primY, col = 2, pch = 4)
textxy(primX, primY, energies, col = 2, cex = 1)
}
plotEnergy = function(run, steps = 0) {
#Does not work for more than one primate per step. Consider using sum(unlist(allPrimates)) to implement this functionality
if (steps == 0) steps = length(run[[1]])
if (steps == 1) {plot(x = seq(2), y = c(0, 0), type = "l")
} else {
energies = vector("list", length(run))
run = lapply(run, function(run) run[1:steps])
energies = mapply(mapply, step = run, MoreArgs = list(FUN = function(step) step$allPrimates[[1]][[1]]@energy))
plot(energies[,1], type = "l")
for (i in 2:length(run)) lines(x = energies[,i], col = i)
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
####################################Run Scripts################################################
library(plyr)
library(calibrate)
library(graphics)
defaultEnergy = 0				#energy that primates start with by default. Can be overwritten during primate creation
fieldSize = 10				#maximum absolute value for x and y coordinates of a resource. Model currently only supports square fields
resourceAvail = 600			#average total resource availability. Expected mean resource size will be this value divided by resource num
resSizeRange = 7				#size by which any resource is able to deviate from the expected mean. Resource size is a random uniform draw.
resourceNum = 20				#number of resources generated
cluster = 0.2				#probability that a new resource will be created between 1 and 2 units away from the previous resource
depletionIndex = 0			#scales the diminition return factor of resources. At 0, resource density has no impact on foraging return. At 1, foraging return is multiplied by the density
k = 1						#distance exponent in gravity model. The simple gravity score is Size/ Distance ^ k
primateSpeed = 1				#how many units a primate can move per step
groupSizes = c(1)				#each element of the vector represents a group, the value is the size of the group. Currently, all individuals are created on the same point, making more than one individual indistinguisable from increasing the foraging rate of a single individual. plotEnergy function does not handle multiple primates yet
moveCost = 2				#energy decrease each step a primate moves
metabCost = 2				#energy decrease each step. If primate moves, this is added to moveCost. Also currently used to determine if a primate should leave current resource (primate leaves when expected foraging return is less than this value)
rRegen = c(min = 0, max = 0)		#determines density increase of resources for each step. Resources are assigned a value uniformly drawn from this range during environment creation. To scale regen rate to resource value, manually change in fillRegen_rate function
types = c("AG", "hybrid")		#movement models to simulate across all created environments. Model can handle vector of any length, but currently only has methods for "AG" and "hybrid"
P = list(defEn = defaultEnergy, fieldSize = fieldSize, resAvail = resourceAvail, resSR = resSizeRange, resNum = resourceNum, clus = cluster, depI = depletionIndex, k = k, pSpeed = 1, grSizes = groupSizes, mCost = moveCost, metabCost = metabCost, rRegen = rRegen, types = types)  #saves all parameters to a list that can easily be passed to functions
install.packages("calibrate")
library(calibrate)
nsteps = 100
run = runSimulation(P, nsteps)
newPrimate = setClass("primate", slots = c(location = "numeric", LTM = "data.frame", energy = "numeric", forageEf = "numeric", speed = "numeric", type = "character"), validity = primateValidity)  #creates the primate class of objects
#*note there are currently no primate specific methods. This exists as a class mostly to allow expansion of subclasses by move
nsteps = 100
run = runSimulation(P, nsteps)
warnings()
plotRun(run)
run
str(run)
colnames(run)
names(run)
colnames(run$AG)
names(run$AG)
head(run$AG)
plotRun(run)
plotRun(run)
names(run)
run$AG[[1]]
setwd("~/")
allSpecies = read.csv("FFT.csv"")
""
allSpecies = read.csv("FFT.csv")
head(allSpecies)
allSpecies$algorithm.marked.outlier
sum(allSpecies$algorithm.marked.outlier)
which(allSpecies$algorithm.marked.outlier == TRUE)
head(allSpecies)
levels(allSpecies$eobs.acceleration.axes)
which(allSpecies$eobs.acceleration.axes == "XYZ")
head(allSpecies)
levels(allSpecies$eobs.acceleration.sampling.frequency.per.axis)
sum(not.null(allSpecies$eobs.acceleration.sampling.frequency.per.axis))
sum(!is.null(allSpecies$eobs.acceleration.sampling.frequency.per.axis))
which(! is.null(allSpecies$eobs.acceleration.sampling.frequency.per.axis))
levels(allSpecies$eobs.accelerations.raw)
head(allSpecies)
names(allSpecies)
?read.csv
library(Rshiny)
library(shiny)
setwd("~/Data Management Project/gitTest")
shiny::runApp()
library(leaflet)
